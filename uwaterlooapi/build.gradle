buildscript {
    repositories {
        maven {
            url 'https://maven.fabric.io/public'
        }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.20.1'
    }
}

repositories {
    maven {
        url 'https://maven.fabric.io/public'
    }
    maven {
        url "https://jitpack.io"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'

Properties properties = new Properties()
File propertiesFile = project.rootProject.file('developer.properties')
if (!propertiesFile.exists()) {
    throw new GradleException('developer.properties file cannot be found in root directory')
}
properties.load(propertiesFile.newDataInputStream())

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile new File("notYourRealFileName")
            keyAlias 'notYourRealKeystoreAlias'
            storePassword 'notYourRealPassword'
            keyPassword 'notYourRealPassword'
        }
    }

    buildTypes {
        all {
            properties.entrySet().each {
                buildConfigField 'String', it.key, '"' + it.value + '"'
            }

            manifestPlaceholders = [ fabric_api_key: properties.getProperty('FABRIC_API_KEY') ]
        }

        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix ' (debug)'
        }

        release {
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        abortOnError false
    }

}

def SUPPORT_VERSION = '23.2.0'
def GOOGLE_API_VERSION = '8.4.0'

dependencies {
    provided project(':uwaterlooapi-processor')
    compile project(':uwaterlooapi-annotations')

    compile project(":uwapi-library")

    compile 'com.android.support:design:' + SUPPORT_VERSION
    compile 'com.android.support:appcompat-v7:' + SUPPORT_VERSION
    compile 'com.android.support:cardview-v7:' + SUPPORT_VERSION
    compile 'com.android.support:multidex:1.0.1'

    compile 'com.google.android.gms:play-services-maps:' + GOOGLE_API_VERSION
    compile 'com.google.android.gms:play-services-location:' + GOOGLE_API_VERSION
    compile 'com.squareup.picasso:picasso:2.3.4'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'net.danlew:android.joda:2.9.0'
    compile 'com.github.tajchert:nammu:1.1.1'
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'

    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }
}

task askForPasswords << {

    if (!System.console()) {
        throw new RuntimeException("No console available!")
    }

    def filePath = new File(System.getenv("KEYSTORE_PATH"))
    def alias    = System.getenv("KEYSTORE_ALIAS")
    def storePw  = new String(System.console().readPassword("\nKeystore password: "))
    def keyPw    = new String(System.console().readPassword("Key password for '" + alias + "': "))

    android.signingConfigs.release.storeFile = filePath
    android.signingConfigs.release.keyAlias = alias
    android.signingConfigs.release.storePassword = storePw
    android.signingConfigs.release.keyPassword = keyPw
}

tasks.whenTaskAdded { theTask ->
    if ("packageRelease".equals(theTask.name)) {
        theTask.dependsOn "askForPasswords"
    }
}
