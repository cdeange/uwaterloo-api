buildscript {
    repositories {
        maven {
            url 'https://maven.fabric.io/public'
        }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.6'
    }
}

repositories {
    maven {
        url 'https://maven.fabric.io/public'
    }
    maven {
        url 'https://jitpack.io'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

def readProperties(fileName) {
    Properties properties = null;
    File file = rootProject.file(fileName)
    if (file.exists()) {
        properties = new Properties();
        properties.load(new FileInputStream(file))
    }
    return properties
}

Properties properties = readProperties('developer.properties')
Properties signingProps = readProperties('signing.properties')

if (!properties) {
    throw new Exception('developer.properties file cannot be found in root directory!')
}

List<String> manifestProperties = ['FABRIC_API_KEY']

def appVersionName() {
    return "${appVersionName}.${sampleAppVersion}"
}

def appVersionCode() {
    return appVersionCode * 1000 + sampleAppVersion
}

android {
    compileSdkVersion targetSdk
    buildToolsVersion buildTools

    defaultConfig {
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionName appVersionName()
        versionCode appVersionCode()

        multiDexEnabled true
    }

    signingConfigs {
        release {
            if (signingProps != null) {
                storeFile = file(signingProps['storeFile'])
                storePassword = signingProps['storePassword']
                keyAlias = signingProps['keyAlias']
                keyPassword = signingProps['keyPassword']
            }
        }
    }

    buildTypes {
        all {
            properties.entrySet().each {
                buildConfigField 'String', it.key, '"' + it.value + '"'
            }

            manifestPlaceholders = manifestProperties.collectEntries {
                [(it.toLowerCase()): properties[it]]
            }

            resValue 'string', 'app_version_name', appVersionName()
        }

        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix ' (debug)'
        }

        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    lintOptions {
        disable 'MissingPrefix'
    }

}

dependencies {
    annotationProcessor project(':uwaterlooapi-processor')
    implementation project(':uwaterlooapi-annotations')

    implementation project(':uwaterlooapi-library')

    implementation 'com.android.support:multidex:1.0.1'
    implementation "com.android.support:design:$supportLibrary"
    implementation "com.android.support:appcompat-v7:$supportLibrary"
    implementation "com.android.support:cardview-v7:$supportLibrary"
    implementation "com.google.android.gms:play-services-maps:$playServices"
    implementation "com.google.android.gms:play-services-location:$playServices"

    implementation "com.jakewharton:butterknife:$butterknife"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknife"

    implementation 'com.squareup.flow:flow:1.0.0-alpha3'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'net.danlew:android.joda:2.9.3'
    implementation 'com.github.tajchert:nammu:1.1.1'
    implementation 'uk.co.chrisjenx:calligraphy:2.2.0'

    implementation('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }

    provided "com.google.auto.value:auto-value:$autoValue"
    provided "com.ryanharter.auto.value:auto-value-gson:$autoValueGson"
    provided "com.ryanharter.auto.value:auto-value-parcel:$autoValueParcel"
    annotationProcessor "com.google.auto.value:auto-value:$autoValue"
    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:$autoValueGson"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:$autoValueParcel"
}
